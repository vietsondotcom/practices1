name: Build, Push and Deploy to Kubernetes

on:
  push:
    branches:
      - dev 
      - main # Trigger action on pushes to main branch

permissions:
  contents: read 
  id-token: write
  security-events: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker container Registry
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build Docker image
      run: |
        docker build -f app.api/app.dockerfile  -t gacon9x/max-weather:${{ github.sha }} .
      
    - name: Push Docker image to Docker hub
      run: |
        docker push gacon9x/max-weather:${{ github.sha }}

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::376129850044:role/sontv-github-svc-practices1
        aws-region: ${{ secrets.AWS_REGION }}
        role-session-name: sontv-github-svc-practices1
      # uses: aws-actions/configure-aws-credentials@v1
      # with:
      #   aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #   aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #   aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Setup terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.11.3 #verify with your end terraform version

    - name: Terraform init
      run: terraform -chdir=app.tf init -upgrade -backend-config="key=github_ci/practices1/${{ github.ref_name }}.tfstate"

    - name: Terraform plan for ${{ github.ref_name }} environment 
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: terraform -chdir=app.tf plan -var-file=envs/${{ github.ref_name }}.tfvars 

    - name: Terraform apply for ${{ github.ref_name }} environment 
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: terraform -chdir=app.tf apply -auto-approve -var-file=envs/${{ github.ref_name }}.tfvars
    
    - name: Update kube config
      run: aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

    - name: Grant the access to eks cluster
      run: |
        EXISTS=$(aws eks list-access-entries 
        --cluster-name "${{ secrets.EKS_CLUSTER_NAME }}" 
        --region "${{ secrets.AWS_REGION }}" \
        --query "accessEntries[?principalArn=='arn:aws:iam::376129850044:role/sontv-github-svc-practices1']" --output json)
        
        if [[ "$EXISTS" == "[]" ]]; then
          echo "Access entry does not exist. Creating..."
          aws eks create-access-entry --cluster-name ${{ secrets.EKS_CLUSTER_NAME }} \
          --principal-arn arn:aws:iam::376129850044:role/sontv-github-svc-practices1  \
          --type STANDARD \
          --user github-ci \
          --kubernetes-groups Viewers \
          --region ${{ secrets.AWS_REGION }}
          aws eks associate-access-policy \
          --cluster-name ${{ secrets.EKS_CLUSTER_NAME }} \
          --region ${{ secrets.AWS_REGION }} \
          --principal-arn arn:aws:iam::376129850044:role/sontv-github-svc-practices1  \
          --access-scope type=cluster \
          --policy-arn arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy
        else
          echo "Access entry already exists. Skipping creation."
        fi
        
    - name: Create Namespace if not exists
      run: |
        ENV=prod
        if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
          ENV=dev
        fi
        kubectl create namespace max-weather-${ENV} --dry-run=client -o yaml | kubectl apply -f -
    - name: Create imagePullSecret for Docker Hub (if not exists)
      run: |
        ENV=prod
        if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
          ENV=dev
        fi
        kubectl get secret dockerhub -n max-weather-${ENV} || \
        kubectl create secret docker-registry dockerhub \
          --docker-username=${{ secrets.DOCKERHUB_USERNAME }} \
          --docker-password=${{ secrets.DOCKERHUB_TOKEN }} \
          --docker-email=tvs100392@gmail.com \
          --docker-server=https://index.docker.io/v1/ \
          --namespace=max-weather-${ENV}
    - name: Install cert-manager (with CRDs)
      run: |
          kubectl apply -f https://github.com/cert-manager/cert-manager/releases/latest/download/cert-manager.yaml
          echo "Waiting for cert-manager components to be ready..."
          kubectl rollout status deployment/cert-manager -n cert-manager
          kubectl rollout status deployment/cert-manager-webhook -n cert-manager
          kubectl rollout status deployment/cert-manager-cainjector -n cert-manager

    - name: Apply Kubernetes manifest
      run: |
        ENV=prod
        if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
          ENV=dev
        fi
        echo "current env deploy: ${ENV}"
        sed -i "s|ENV|${ENV}|g" app.api/k8s/manifest.yaml
        sed -i "s|CONTAINER_REGISTRY_BASE_URI|gacon9x/max-weather:${{ github.sha }}|g" app.api/k8s/manifest.yaml
        echo "viewing the manifest"
        cat app.api/k8s/manifest.yaml
        kubectl apply -f app.api/k8s/manifest.yaml
        kubectl rollout status deployment/app-api -n max-weather-${ENV}

    - name: Create the logs deamon namespace
      run: |
        ENV=prod
        if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
          ENV=dev
        fi
        kubectl apply -f https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/latest/k8s-deployment-manifest-templates/deployment-mode/daemonset/container-insights-monitoring/cloudwatch-namespace.yaml
        kubectl create configmap fluent-bit-cluster-info  \
          --from-literal=cluster.name=${{ secrets.EKS_CLUSTER_NAME }} \
          --from-literal=http.server=On \
          --from-literal=http.port=2020 \
          --from-literal=read.head=On \
          --from-literal=read.tail=On \
          --from-literal=logs.region=${{ secrets.AWS_REGION }} -n amazon-cloudwatch

    - name: Apply the Fluent bit
      run: |
        kubectl apply -f https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/latest/k8s-deployment-manifest-templates/deployment-mode/daemonset/container-insights-monitoring/fluent-bit/fluent-bit.yaml
    
    - name: Validating the config
      run: |
        kubectl get pods -n amazon-cloudwatch

    - name: Install eksctl
      run: |
        curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
        sudo mv /tmp/eksctl /usr/local/bin

    - name: Running provision OIDC
      run: |
        eksctl utils associate-iam-oidc-provider --region=${{ secrets.AWS_REGION }} --cluster=${{ secrets.EKS_CLUSTER_NAME }} --approve
        eksctl create iamserviceaccount \
          --name fluent-bit \
          --namespace amazon-cloudwatch \
          --cluster ${{ secrets.EKS_CLUSTER_NAME }} \
          --attach-policy-arn "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy" \
          --approve \
          --override-existing-serviceaccounts \
          --region ${{ secrets.AWS_REGION }} \
  
  tvt:
    needs: deploy
    runs-on: ubuntu-latest

    steps:

      - name: Run multiple shell commands
        run: |
          ENV=prod
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            ENV=dev
          fi
          echo "Process TVT"
          URL="https://${ENV}-api.sontv.com/v1/ping"
          MAX_RETRIES=5
          DELAY=2
          attempt=0
          sleep 10
          # Function to perform curl and handle retries
          while (( attempt < MAX_RETRIES )); do
              echo "Attempt $((attempt + 1)) to test URL: $URL"
              # Perform the curl request
              curl --fail --silent --show-error "$URL" && {
                  echo "URL responded successfully."
                  exit 0
              }
              ((attempt++))
              if (( attempt < MAX_RETRIES )); then
                  echo "Retrying in $DELAY seconds..."
                  sleep $DELAY
              fi
          done

          # If all attempts fail, throw an error
          echo "Error: URL test failed after $MAX_RETRIES attempts."
          exit 1